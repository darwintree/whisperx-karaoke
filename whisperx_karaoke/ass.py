from whisperx.types import SingleAlignedSegment, SingleWordSegment

def formatted_word_with_length(text: str, milliseconds: int):
    return "{\\kf" + str(milliseconds) + "}" + text

def insert(s: str, index: int, substring: str):
    return s[:index] + substring + s[index:]

def index_of_last_word_with_time(words: list[SingleWordSegment]):
    last = -1
    for i in range(len(words)):
        word = words[i]
        if word.get("end"):
            last = i
    # if last != -1:
    #     print(words[last]["word"])
    return last

def get_duration_mark(duraction_in_seconds: float):
    return "{\\kf" + str(int(100* duraction_in_seconds)) + "}"

def segment_to_ass_line(segment: SingleAlignedSegment, next_segment=None):
    words = segment["words"]
    studying_substr = ""

    line_prefix = (
        f"Dialogue: 0,{segment['start']:.2f},{segment['end']:.2f},orig,,0,0,0,,"
    )
    last_word_end: float = segment["start"]
    # append word to the line
    last_index = -1
    line_lyric: str = segment["text"]
    try:
        if studying_substr:
            line_lyric.index(studying_substr)
            print(segment)
    except:
        pass

    last_duration_insertion = index_of_last_word_with_time(segment["words"])
    first_inserted = True

    for i in range(len(words)):
        word = words[i]
        if not word.get("end"):
            last_index = line_lyric.index(word["word"], last_index + 1)
            try:
                if studying_substr:
                    line_lyric.index(studying_substr)
                    print(line_lyric)
            except:
                pass
            continue

        word_duration = word.get("end") - last_word_end
        # if this is the last duration insertion, duration takes segment end into account
        if i == last_duration_insertion:
            word_duration = segment["end"] - last_word_end

        place_to_insert_duration = line_lyric.index(word["word"], last_index+1)
        duration_mark = get_duration_mark(word_duration)
        if first_inserted:
            line_lyric = insert(line_lyric, 0, duration_mark)
            first_inserted = False
        else:
            line_lyric = insert(line_lyric, place_to_insert_duration, duration_mark)

        last_index = place_to_insert_duration + len(duration_mark)
        last_word_end = word.get("end")
        try:
            if studying_substr:
                line_lyric.index(studying_substr)
                print(i)
                print(line_lyric)
        except:
            pass

    # this means no duration insertion was made
    # use segment as duration
    if first_inserted:
        word_duration = segment["end"] - segment["start"]
        duration_mark = get_duration_mark(word_duration)
        line_lyric = insert(line_lyric, 0, duration_mark)
    return line_prefix + line_lyric


def segments_to_ass_text(segments: list[SingleAlignedSegment]):
    ass_text = """[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
ScriptType: v4.00+
Timer: 100.0000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: roma,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: orig,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
    for i in range(len(segments)):
        segment = segments[i]
        next_segment = None if (i + 1) == len(segments) else segments[i + 1]
        ass_text += segment_to_ass_line(segment, next_segment)
        ass_text += "\n"
    return ass_text
